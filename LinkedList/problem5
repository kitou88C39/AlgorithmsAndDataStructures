import java.util.Scanner;

class Node {
	int value;
	Node next;
	Node prev; // prevポインタを追加

	Node(int value) {
		this.value = value;
	}
}


class List {
	Node dummy; // ダミーノード

	List() {
		dummy = new Node(-1); // ダミーノードの値は -1
		dummy.next = dummy;   // 最初はダミーノードが自分自身を指す（空のリスト）
		dummy.prev = dummy;   // 双方向なので prev も自分自身を指す
	}

	// 前から順に要素を出力する（既存のメソッド）
	void print() {
		for (Node x = dummy.next; x != dummy; x = x.next) {
			System.out.print(x.value + " ");
		}
		System.out.println();
	}

	// 逆向きに要素を出力する関数を実装
	void printReverse() {
		// ここにコードを書く
		Node current = dummy.prev; // ダミーノードの一つ前のノード（リストの最後の要素）から走査を開始

		// current がダミーノードに戻ってくるまでループを続ける
		while (current != dummy) {
			System.out.print(current.value + " "); // 要素の値と半角スペースを出力
			current = current.prev; // prev ポインタを使って前のノードへ進む
		}
		System.out.println(); // 最後に改行を出力
	}

	// 値を検索する（既存のメソッド）
	Node find(int value) {
		for (Node x = dummy.next; x != dummy; x = x.next) {
			if (x.value == value) {
				return x;
			}
		}
		return dummy; // 見つからなければダミーノードを返す
	}
}


public class Main {

	public static void main(String[] args) {
		List list = new List();
		Node node1 = new Node(1);
		Node node2 = new Node(2);
		Node node3 = new Node(3);

		// 順方向のリンクを構築: dummy -> node1 -> node2 -> node3 -> dummy
		list.dummy.next = node1;
		node1.next = node2;
		node2.next = node3;
		node3.next = list.dummy;

		// 逆方向のリンクを構築: dummy <- node1 <- node2 <- node3 <- dummy
		list.dummy.prev = node3; // ダミーの前のノードは最後の要素 (node3)
		node3.prev = node2;
		node2.prev = node1;
		node1.prev = list.dummy; // 最初の要素の前のノードはダミー

		list.print();        // 期待される出力: 1 2 3
		list.printReverse(); // 期待される出力: 3 2 1
	}
}