import java.util.Scanner;
import java.util.Arrays;

public class Main {

    // lowerBound関数: ソートされた配列aの中でx以上の最初の要素のインデックスを返す
    // 例: a = [10, 20, 30, 40], x = 25 -> 2 (インデックス30)
    // 例: a = [10, 20, 30, 40], x = 20 -> 1 (インデックス20)
    static int lowerBound(int[] a, int n, int x) {
        int left = 0, right = n;

        while (left != right) {
            int mid = left + (right - left) / 2; // オーバーフロー対策

            if (a[mid] >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    // upperBound関数: ソートされた配列aの中でyより大きい最初の要素のインデックスを返す
    // 例: a = [10, 20, 30, 40], y = 25 -> 3 (インデックス40)
    // 例: a = [10, 20, 30, 40], y = 20 -> 2 (インデックス30)
    static int upperBound(int[] a, int n, int y) {
        int left = 0, right = n;

        while (left != right) {
            int mid = left + (right - left) / 2; // オーバーフロー対策

            if (a[mid] > y) { // lowerBoundとは条件が異なる
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    // check関数: 与えられた距離 mid_val が条件を満たすか判定する
    // (各a[i]からmid_valの範囲内にあるbの要素の合計がk以上になるか)
    static boolean check(int mid_val, int[] a, int n, int[] b, int m, int k) {
        // 合計カウントは大きくなる可能性があるため long にする
        long count = 0; 

        // 配列 a の各要素 a[i] について処理
        for (int i = 0; i < n; i++) {
            // 探索範囲の下限と上限を計算
            int rangeStart = a[i] - mid_val;
            int rangeEnd = a[i] + mid_val;

            // 配列 b の中で [rangeStart, rangeEnd] の範囲に入る要素の数を取得
            // upperBound(b, m, rangeEnd) は rangeEnd より大きい最初の要素のインデックス
            // lowerBound(b, m, rangeStart) は rangeStart 以上の最初の要素のインデックス
            // その差が範囲内の要素数になる
            count += (long)upperBound(b, m, rangeEnd) - lowerBound(b, m, rangeStart);

            // 途中で合計カウントが k 以上になったら、それ以上計算する必要はない
            // その時点で条件を満たすと判断できる
            if (count >= k) {
                return true;
            }
        }
        // ループを終えてもカウントが k 以上であれば true
        return count >= k;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(); // 配列 a の要素数
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int m = sc.nextInt(); // 配列 b の要素数
        int[] b = new int[m];
        for (int i = 0; i < m; i++) {
            b[i] = sc.nextInt();
        }

        int k = sc.nextInt(); // 目標とする合計カウント

        // --- ここからコードを書き足す ---

        // 配列 b を昇順にソートする
        // lowerBound/upperBound 関数が正しく機能するために必須
        Arrays.sort(b);

        // 二分探索の探索範囲を設定
        // 求めたいのは「条件を満たす最小の距離」
        // left: 条件を満たさない最大値（-1 から始めると、答えが 0 の場合にも対応できる）
        // right: 条件を満たす最小値（考えられる最大の差分値。問題の制約によるが、20億は安全な上限）
        int left = -1; 
        int right = 2_000_000_000; 

        // 二分探索ループ
        // left と right の差が 1 になるまで繰り返す
        // ループ終了後、right が条件を満たす最小の距離となる
        while (right - left > 1) {
            int mid = left + (right - left) / 2; // オーバーフロー対策

            // check関数で現在の mid (距離) が条件を満たすか判定
            if (check(mid, a, n, b, m, k)) {
                // mid が条件を満たす場合、より小さい距離でも条件を満たせるか探す
                right = mid; // right を mid で更新し、探索範囲を狭める
            } else {
                // mid が条件を満たさない場合、mid は小さすぎるので、より大きい距離を探す
                left = mid; // left を mid で更新し、探索範囲を狭める
            }
        }

        // ループ終了後、right が条件を満たす最小の距離となる
        System.out.println(right);

        sc.close(); // Scanner を閉じる
    }
}